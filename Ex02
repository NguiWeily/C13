Files to turn in : btree_apply_infix.c, ft_btree.h
Allowed functions : None

• Create a function btree_apply_infix which applies the function given as argument
to the item of each node, using infix traversal to search the tree.
• Here’s how it should be prototyped :
void btree_apply_infix(t_btree *root, void (*applyf)(void *));

Certainly! Here's the implementation of the `btree_apply_infix` function:

```c
#include "ft_btree.h"

void btree_apply_infix(t_btree *root, void (*applyf)(void *))
{
    if (root == NULL)
        return;
    
    btree_apply_infix(root->left, applyf);
    applyf(root->item);
    btree_apply_infix(root->right, applyf);
}
```

And here's a test program to demonstrate the usage of `btree_apply_infix`:

```c
#include <stdio.h>
#include "ft_btree.h"

void print_item(void *item)
{
    printf("%d ", *(int *)item);
}

int main()
{
    // Create a binary tree
    t_btree *root = btree_create_node((void *)1);
    root->left = btree_create_node((void *)2);
    root->right = btree_create_node((void *)3);
    root->left->left = btree_create_node((void *)4);
    root->left->right = btree_create_node((void *)5);

    // Apply the print_item function using infix traversal
    btree_apply_infix(root, print_item);
    printf("\n");

    return 0;
}
```

In this example, we create a binary tree and apply the `print_item` function using the `btree_apply_infix` function. The `print_item` function simply prints the value of each node's item. The infix traversal ensures that the items are printed in the correct order.

Make sure to include the `ft_btree.h` header file in your program to use the `t_btree` structure and the `btree_apply_infix` function.

Certainly! Here's the implementation of the `ft_btree.h` file:

```c
#ifndef FT_BTREE_H
#define FT_BTREE_H

typedef struct s_btree
{
    struct s_btree *left;
    struct s_btree *right;
    void *item;
} t_btree;

t_btree *btree_create_node(void *item);

#endif
```

The `ft_btree.h` file defines the structure `t_btree` for a binary tree node. It also includes the function prototype for `btree_create_node`, which creates a new node with the specified item.

Make sure to include this header file in your program whenever you use the `t_btree` structure or the `btree_create_node` function.
