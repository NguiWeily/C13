Files to turn in : btree_insert_data.c, ft_btree.h
Allowed functions : btree_create_node

• Create a function btree_insert_data which inserts the element item into a tree.
The tree passed as argument will be sorted : for each node all lower elements are
located on the left side and all higher or equal elements on the right. We’ll also
pass a comparison function similar to strcmp as argument.
• The root parameter points to the root node of the tree. First time called, it should
point to NULL.
• Here’s how it should be prototyped :
void btree_insert_data(t_btree **root, void *item, int (*cmpf)(void *, void *));

Here's the implementation of the `btree_insert_data` function:

```c
#include "ft_btree.h"

void btree_insert_data(t_btree **root, void *item, int (*cmpf)(void *, void *))
{
    if (*root == NULL)
    {
        *root = btree_create_node(item);
        return;
    }

    if (cmpf(item, (*root)->item) < 0)
        btree_insert_data(&(*root)->left, item, cmpf);
    else
        btree_insert_data(&(*root)->right, item, cmpf);
}
```

This function recursively inserts the element `item` into a binary search tree pointed by `root`. It uses the comparison function `cmpf` to determine the position of the new item in the tree.

Remember to include the `ft_btree.h` header file when compiling the program.
Certainly! Here's the content of the `ft_btree.h` file for the `btree_insert_data` function:

```c
#ifndef FT_BTREE_H
# define FT_BTREE_H

typedef struct s_btree
{
    struct s_btree *left;
    struct s_btree *right;
    void *item;
} t_btree;

t_btree *btree_create_node(void *item);

#endif
```

Make sure to include this header file in your program when using the `btree_insert_data` function.
Certainly! Here's an example test program for the `btree_insert_data` function:

```c
#include <stdio.h>
#include "ft_btree.h"

// Example comparison function for integers
int cmp_int(void *a, void *b)
{
    int num_a = *(int*)a;
    int num_b = *(int*)b;
    return (num_a - num_b);
}

int main()
{
    t_btree *root = NULL;

    // Insert some elements into the tree
    int data[] = {4, 2, 6, 1, 3, 5, 7};
    int size = sizeof(data) / sizeof(data[0]);

    for (int i = 0; i < size; i++)
    {
        btree_insert_data(&root, &data[i], cmp_int);
    }

    // Print the elements using in-order traversal
    void print_node(void *item)
    {
        int num = *(int*)item;
        printf("%d ", num);
    }

    printf("In-order traversal: ");
    btree_apply_infix(root, print_node);
    printf("\n");

    return 0;
}
```

Make sure to include the `ft_btree.h` header file in your program and provide your own comparison function based on your data type.
